package StepDefination;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.WebDriverWait;

import PageObject.AddNewCustomerPgae;
import PageObject.LoginPage;
import PageObject.SearchCustomerPage;
import io.cucumber.java.en.*;
import io.github.bonigarcia.wdm.WebDriverManager;

/* Child class of base class */
public class StepDef extends BaseClass{


	@Given("User Launch Chrome browser")
	public void user_launch_chrome_browser() {

		WebDriverManager.firefoxdriver().setup();
		driver = new FirefoxDriver();

		loginpage = new LoginPage(driver);
		addnewcustomerpage = new AddNewCustomerPgae(driver);
		searchcustomerpg = new SearchCustomerPage(driver);

	}

	@When("User opens URL {string}")
	public void user_opens_url(String url) throws InterruptedException {

		driver.get(url);
	}

	@When("User Enter Email as {string} and password as {string}")
	public void user_enter_email_as_and_password_as(String emailadd, String password) throws InterruptedException {

		Thread.sleep(2000);
		loginpage.enterEmail(emailadd);

		loginpage.enterPassword(password);

	}

	@When("Click on Login")
	public void click_on_login() {

		loginpage.ClickOnLoginButton();
	}

	@SuppressWarnings("deprecation")
	@Then("Page Title should be {string}")
	public void page_title_should_be(String expectedTitle) {

		String actualTitle = driver.getTitle();

		if (actualTitle.equals(expectedTitle)) {

			Assert.assertTrue(true);

		} else {

			Assert.assertTrue(false);
		}

		System.out.println(actualTitle);
	}

	@When("User click on Logout link")
	public void user_click_on_log_out_link() throws InterruptedException {

		Thread.sleep(2000);
		loginpage.ClickOnLogoutButton();
	}

	@Then("close browser")
	public void close_browser() {

		driver.close();

	}

/////// Add new Customer //////

	@Then("User can view Dashboard")
	public void user_can_view_dashboard() {

		String actualtiltle = addnewcustomerpage.getpagetitle();

		String expectedtitle = "Dashboard / nopCommerce administration";

		if (actualtiltle.equals(expectedtitle)) {

			Assert.assertTrue(true);
		} else

		{
			Assert.assertTrue(false);
		}

	}

	@When("User click on customers Menu")
	public void user_click_on_customers_menu() {

		addnewcustomerpage.clcikoncustomersmenu();

	}

	@When("Click on customers Menu Item")
	public void click_on_customers_menu_item() throws InterruptedException {
		
		Thread.sleep(2000);

		addnewcustomerpage.clickoncustomersmenuitem();
	}

	@When("Click on Add new Button")
	public void click_on_add_new_button() throws InterruptedException {

		Thread.sleep(1000);
		addnewcustomerpage.clickonAddnew();
	}

	@Then("User can view add new customers page")
	public void user_can_view_add_new_customers_page() {

		String actualtiltle = addnewcustomerpage.getpagetitle();

		String expectedtitle = "Add a new customer / nopCommerce administration";

		if (actualtiltle.equals(expectedtitle)) {

			Assert.assertTrue(true);
		} else

		{
			Assert.assertTrue(false);
		}
	}

	@When("User enter customer info")
	public void user_enter_customer_info() {

		//addnewcustomerpage.enteremail("somesgkamble000@gmail.com");
		addnewcustomerpage.enteremail(genrateemailid() + "@gmail.com");
		addnewcustomerpage.enterpassword("test1");
		addnewcustomerpage.enterfirstname("lahudas");
		addnewcustomerpage.enterlastname("kamble");
		addnewcustomerpage.entergender("Male");
		addnewcustomerpage.enterdob("7/13/1988");
		addnewcustomerpage.entercompanyname("codestudio");
		addnewcustomerpage.enteradmincontent("Admincontent");
		addnewcustomerpage.entermanagerofvendor("Vendor 1");

	}

	@When("Click on saave button")
	public void click_on_saave_button() {

		addnewcustomerpage.clickonsave();
	}

	@Then("User can view confirmation meassage {string}")
	public void user_can_view_confirmation_meassage(String Excpectedconfirmationmsg) throws InterruptedException {
		
		Thread.sleep(3000);

		String bodytext = driver.findElement(By.tagName("Body")).getText();

		if (bodytext.contains(Excpectedconfirmationmsg)) 
		{

			Assert.assertTrue(true);//pass
		} 
		
		else

		{
			Assert.assertTrue(false);//fail
		}
	}
	
	/// search customer  //
	
	@When("Enter Customer email")
	public void enter_customer_email() throws InterruptedException {
		
		Thread.sleep(2000);
	   
		searchcustomerpg.enteremailadd("victoria_victoria@nopCommerce.com");
	}
	@When("Click on search button")
	public void click_on_search_button() {
	  
		searchcustomerpg.clickonsearchbtn();
	}

	@Then("User should found email in search table")
	public void user_should_found_email_in_search_table() throws InterruptedException {
		
		Thread.sleep(2000);
	   
		String expectedemail = "victoria_victoria@nopCommerce.com";
		
		Assert.assertTrue(searchcustomerpg.searchcustomerbyemail(expectedemail));
	}
	
	// search customer by name//
	
	@When("Enter Customer Firstname")
	public void enter_customer_firstname() throws InterruptedException {
		
		Thread.sleep(2000);
		
		searchcustomerpg.enterfirstname("Victoria");
	   
	}

	@When("Enter Customer Lastname")
	public void enter_customer_lastname() {
	  
		searchcustomerpg.enterlastname("Terces");
	}

	@Then("User should found name in search table")
	public void user_should_found_name_in_search_table() throws InterruptedException {
		
		Thread.sleep(1000);
	   
		String expectedname= "Victoria Terces";
		
		//Assert.assertTrue(searchcustomerpg.searchcustomerbyname(expectedname));
		
		if(searchcustomerpg.searchcustomerbyname(expectedname) ==true) 
		{
			Assert.assertTrue(true);
			
		}else 
		{
			Assert.assertTrue(false);	
		}
	}


}
